name: RebuildCategoryByColumnValue
id:   RebuildCategoryByColumnValue
key:  rebuildcategorybycolumnvalue
version: 0.1
description: Rebuild category by category's column value.
tags:
    function:
        RebuildCategoryByColumnValue: >
                sub {
                        my ( $ctx, $args, $cond ) = @_;
                        my $app = MT->instance;
                        if ( ref( $app ) =~ /^MT::App/ ) {
                            return if ( $app->mode =~ /preview/ );
                        }
                        my $blog_id = $args->{ blog_id };
                        if (! $blog_id ) {
                            $blog_id = $app->blog->id;
                        }
                        if ( $blog_id eq 'all' ) {
                            $blog_id = undef;
                        }
                        my $column = $args->{ column } || 'label';
                        my $class = $args->{ class } || 'category';
                        my $eq = $args->{ eq };
                        return '' unless $eq;
                        my $params;
                        $params->{ blog_id } = $blog_id if $blog_id;
                        $params->{ class } = $class;
                        $params->{ $column } = $eq;
                        my $args = {};
                        if ( $column =~ /^field\./ ) {
                            my $target_class = MT->model( $class );
                            my $meta_class = $target_class->meta_pkg;
                            my $meta_pk = $meta_class->primary_key_tuple->[ 0 ];
                            my $meta_id_cond = '= ' . $meta_pk;
                            my $meta_rec = MT::Meta->metadata_by_name( $target_class, $column );
                            my $meta_col = $meta_rec->{ type };
                            $args->{ 'join' } = 
                                $meta_class->join_on(
                                                undef,
                                                {
                                                    $meta_pk => \$meta_id_cond,
                                                    type => $column,
                                                    $meta_col => $eq,
                                                },
                                            ),
                            delete $params->{ $column };
                        }
                        my @categories = mt->model( 'category' )->load( $params, $args );
                        my $params2;
                        $params2->{ blog_id } = $blog_id if $blog_id;
                        $params2->{ archive_type } = ($class = 'category') ? 'Category' : 'Folder';

                        my $template_id = $args->{ template_id };
                        my $templatemap_id = $args->{ templatemap_id };
                        $params2->{ template_id } = $template_id if $template_id;
                        $params2->{ templatemap_id } = $templatemap_id if $templatemap_id;

                        for my $category ( @categories ) {
                            $params2->{ category_id } = $category->id;
                            my @fis = mt->model( 'fileinfo' )->load( $params2 );
                            require MT::WeblogPublisher;
                            my $pub = MT::WeblogPublisher->new;
                            if ( @fis ) {
                                for my $fi ( @fis ) {
                                    my $res = $pub->rebuild_from_fileinfo( $fi );
                                }
                            }
                            return '';
                        }
                    }

